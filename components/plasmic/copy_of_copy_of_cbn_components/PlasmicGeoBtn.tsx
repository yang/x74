// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: yX0kYWItvY_O_m
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CpaBtn from "../../CpaBtn"; // plasmic-import: 2NsBmbW74uTHcu/component
import GeoCheck from "../../GeoCheck"; // plasmic-import: 4oMKLAUMNXb_Hq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicGeoBtn.module.css"; // plasmic-import: yX0kYWItvY_O_m/css

export type PlasmicGeoBtn__VariantMembers = {
  small: "small";
};

export type PlasmicGeoBtn__VariantsArgs = {
  small?: SingleBooleanChoiceArg<"small">;
};

type VariantPropType = keyof PlasmicGeoBtn__VariantsArgs;
export const PlasmicGeoBtn__VariantProps = new Array<VariantPropType>("small");

export type PlasmicGeoBtn__ArgsType = {
  cpaBtn?: React.ReactNode;
  countryFlag?: React.ReactNode;
};

type ArgPropType = keyof PlasmicGeoBtn__ArgsType;
export const PlasmicGeoBtn__ArgProps = new Array<ArgPropType>(
  "cpaBtn",
  "countryFlag"
);

export type PlasmicGeoBtn__OverridesType = {
  root?: p.Flex<"div">;
  cpaBtn?: p.Flex<typeof CpaBtn>;
  geoCheck?: p.Flex<typeof GeoCheck>;
};

export interface DefaultGeoBtnProps {
  cpaBtn?: React.ReactNode;
  countryFlag?: React.ReactNode;
  small?: SingleBooleanChoiceArg<"small">;
  className?: string;
}

function PlasmicGeoBtn__RenderFunc(props: {
  variants: PlasmicGeoBtn__VariantsArgs;
  args: PlasmicGeoBtn__ArgsType;
  overrides: PlasmicGeoBtn__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.rootsmall]: hasVariant(variants, "small", "small") }
      )}
    >
      <CpaBtn
        data-plasmic-name={"cpaBtn"}
        data-plasmic-override={overrides.cpaBtn}
        className={classNames("__wab_instance", sty.cpaBtn, {
          [sty.cpaBtnsmall]: hasVariant(variants, "small", "small")
        })}
        cpaBtn={p.renderPlasmicSlot({
          defaultContents: "PLAY",
          value: args.cpaBtn,
          className: classNames(sty.slotTargetCpaBtn, {
            [sty.slotTargetCpaBtnsmall]: hasVariant(variants, "small", "small")
          })
        })}
      />

      {true ? (
        <GeoCheck
          data-plasmic-name={"geoCheck"}
          data-plasmic-override={overrides.geoCheck}
          className={classNames("__wab_instance", sty.geoCheck, {
            [sty.geoChecksmall]: hasVariant(variants, "small", "small")
          })}
          countryFlag={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___5XIE)}
                displayHeight={"26px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"26px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/flagHolder.svg",
                  fullWidth: 26,
                  fullHeight: 26,
                  aspectRatio: 1
                }}
              />
            ),

            value: args.countryFlag
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cpaBtn", "geoCheck"],
  cpaBtn: ["cpaBtn"],
  geoCheck: ["geoCheck"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  cpaBtn: typeof CpaBtn;
  geoCheck: typeof GeoCheck;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGeoBtn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGeoBtn__VariantsArgs;
    args?: PlasmicGeoBtn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGeoBtn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGeoBtn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGeoBtn__ArgProps,
      internalVariantPropNames: PlasmicGeoBtn__VariantProps
    });

    return PlasmicGeoBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGeoBtn";
  } else {
    func.displayName = `PlasmicGeoBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicGeoBtn = Object.assign(
  // Top-level PlasmicGeoBtn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cpaBtn: makeNodeComponent("cpaBtn"),
    geoCheck: makeNodeComponent("geoCheck"),

    // Metadata about props expected for PlasmicGeoBtn
    internalVariantProps: PlasmicGeoBtn__VariantProps,
    internalArgProps: PlasmicGeoBtn__ArgProps
  }
);

export default PlasmicGeoBtn;
/* prettier-ignore-end */
