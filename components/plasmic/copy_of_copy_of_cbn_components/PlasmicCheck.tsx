// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: 5sobSnzMI4HNK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicCheck.module.css"; // plasmic-import: 5sobSnzMI4HNK/css

import Good3Icon from "./icons/PlasmicIcon__Good3"; // plasmic-import: d2572puS-rWXN4/icon
import Good2Icon from "./icons/PlasmicIcon__Good2"; // plasmic-import: vsJIIiAuDkFFvK/icon
import BadIcon from "./icons/PlasmicIcon__Bad"; // plasmic-import: Yw60T2Cl3_M2SH/icon

export type PlasmicCheck__VariantMembers = {
  bad: "bad";
  good: "good";
};

export type PlasmicCheck__VariantsArgs = {
  bad?: SingleBooleanChoiceArg<"bad">;
  good?: SingleBooleanChoiceArg<"good">;
};

type VariantPropType = keyof PlasmicCheck__VariantsArgs;
export const PlasmicCheck__VariantProps = new Array<VariantPropType>(
  "bad",
  "good"
);

export type PlasmicCheck__ArgsType = {};
type ArgPropType = keyof PlasmicCheck__ArgsType;
export const PlasmicCheck__ArgProps = new Array<ArgPropType>();

export type PlasmicCheck__OverridesType = {
  root?: p.Flex<"div">;
  normal?: p.Flex<"svg">;
};

export interface DefaultCheckProps {
  bad?: SingleBooleanChoiceArg<"bad">;
  good?: SingleBooleanChoiceArg<"good">;
  className?: string;
}

function PlasmicCheck__RenderFunc(props: {
  variants: PlasmicCheck__VariantsArgs;
  args: PlasmicCheck__ArgsType;
  overrides: PlasmicCheck__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.rootgood]: hasVariant(variants, "good", "good") }
      )}
    >
      {(
        hasVariant(variants, "good", "good")
          ? true
          : hasVariant(variants, "bad", "bad")
          ? true
          : true
      ) ? (
        <Good3Icon
          data-plasmic-name={"normal"}
          data-plasmic-override={overrides.normal}
          className={classNames(projectcss.all, sty.normal, {
            [sty.normalbad]: hasVariant(variants, "bad", "bad"),
            [sty.normalgood]: hasVariant(variants, "good", "good")
          })}
          role={"img"}
        />
      ) : null}
      {(
        hasVariant(variants, "good", "good")
          ? true
          : hasVariant(variants, "bad", "bad")
          ? true
          : true
      ) ? (
        <Good2Icon
          className={classNames(projectcss.all, sty.svg__wYzKr, {
            [sty.svgbad__wYzKrDyxj5]: hasVariant(variants, "bad", "bad"),
            [sty.svggood__wYzKrYGsK]: hasVariant(variants, "good", "good")
          })}
          role={"img"}
        />
      ) : null}
      {(hasVariant(variants, "bad", "bad") ? true : true) ? (
        <BadIcon
          className={classNames(projectcss.all, sty.svg__fG3N, {
            [sty.svgbad__fG3NDyxj5]: hasVariant(variants, "bad", "bad")
          })}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "normal"],
  normal: ["normal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  normal: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheck__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheck__VariantsArgs;
    args?: PlasmicCheck__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheck__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCheck__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCheck__ArgProps,
      internalVariantPropNames: PlasmicCheck__VariantProps
    });

    return PlasmicCheck__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheck";
  } else {
    func.displayName = `PlasmicCheck.${nodeName}`;
  }
  return func;
}

export const PlasmicCheck = Object.assign(
  // Top-level PlasmicCheck renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    normal: makeNodeComponent("normal"),

    // Metadata about props expected for PlasmicCheck
    internalVariantProps: PlasmicCheck__VariantProps,
    internalArgProps: PlasmicCheck__ArgProps
  }
);

export default PlasmicCheck;
/* prettier-ignore-end */
