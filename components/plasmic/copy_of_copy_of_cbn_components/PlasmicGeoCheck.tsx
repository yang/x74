// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: 4oMKLAUMNXb_Hq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CheckMark from "../../CheckMark"; // plasmic-import: kVgrwryxuBFYqq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicGeoCheck.module.css"; // plasmic-import: 4oMKLAUMNXb_Hq/css

export type PlasmicGeoCheck__VariantMembers = {};

export type PlasmicGeoCheck__VariantsArgs = {};
type VariantPropType = keyof PlasmicGeoCheck__VariantsArgs;
export const PlasmicGeoCheck__VariantProps = new Array<VariantPropType>();

export type PlasmicGeoCheck__ArgsType = {
  countryFlag?: React.ReactNode;
};

type ArgPropType = keyof PlasmicGeoCheck__ArgsType;
export const PlasmicGeoCheck__ArgProps = new Array<ArgPropType>("countryFlag");

export type PlasmicGeoCheck__OverridesType = {
  root?: p.Flex<"div">;
  checkMark?: p.Flex<typeof CheckMark>;
};

export interface DefaultGeoCheckProps {
  countryFlag?: React.ReactNode;
  className?: string;
}

function PlasmicGeoCheck__RenderFunc(props: {
  variants: PlasmicGeoCheck__VariantsArgs;
  args: PlasmicGeoCheck__ArgsType;
  overrides: PlasmicGeoCheck__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___7SmBn)}
              displayHeight={"26px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"26px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_copy_of_cbn_components/images/flagHolder.svg",
                fullWidth: 26,
                fullHeight: 26,
                aspectRatio: 1
              }}
            />
          ),

          value: args.countryFlag
        })}

        <CheckMark
          data-plasmic-name={"checkMark"}
          data-plasmic-override={overrides.checkMark}
          className={classNames("__wab_instance", sty.checkMark)}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "checkMark"],
  checkMark: ["checkMark"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkMark: typeof CheckMark;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGeoCheck__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGeoCheck__VariantsArgs;
    args?: PlasmicGeoCheck__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGeoCheck__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGeoCheck__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGeoCheck__ArgProps,
      internalVariantPropNames: PlasmicGeoCheck__VariantProps
    });

    return PlasmicGeoCheck__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGeoCheck";
  } else {
    func.displayName = `PlasmicGeoCheck.${nodeName}`;
  }
  return func;
}

export const PlasmicGeoCheck = Object.assign(
  // Top-level PlasmicGeoCheck renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkMark: makeNodeComponent("checkMark"),

    // Metadata about props expected for PlasmicGeoCheck
    internalVariantProps: PlasmicGeoCheck__VariantProps,
    internalArgProps: PlasmicGeoCheck__ArgProps
  }
);

export default PlasmicGeoCheck;
/* prettier-ignore-end */
