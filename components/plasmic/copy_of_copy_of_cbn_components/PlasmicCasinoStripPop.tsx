// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: vzrgKhto_QQx6N
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PaymentLogos from "../../PaymentLogos"; // plasmic-import: iAwocRK-9KdmRe/component
import VideoReviewBtn from "../../VideoReviewBtn"; // plasmic-import: 3ANj-HxcqrOyyT/component
import PlayNowBtn from "../../PlayNowBtn"; // plasmic-import: 57SxpRBLIurCd_/component
import CasinoFullReviewBtn from "../../CasinoFullReviewBtn"; // plasmic-import: SY0fThONFAWcH0/component
import BestGames from "../../BestGames"; // plasmic-import: _HUkNMOFGj56Vi/component
import GameProviders from "../../GameProviders"; // plasmic-import: -BY7quCuv_EdY_/component
import Wagering from "../../Wagering"; // plasmic-import: 8IdaqiyysNfTVQ/component
import MaxCash from "../../MaxCash"; // plasmic-import: pAv03fvKN_t3VC/component
import ProsCons from "../../ProsCons"; // plasmic-import: M-C0j1W8HBKA_/component

import { useScreenVariants as useScreenVariantsnwCq1TNqK1ZjKa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NWCq1TNqK1ZjKa/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicCasinoStripPop.module.css"; // plasmic-import: vzrgKhto_QQx6N/css

import Frame1593Icon from "./icons/PlasmicIcon__Frame1593"; // plasmic-import: 90uvfieAr7FyhJ/icon
import FrameIcon from "./icons/PlasmicIcon__Frame"; // plasmic-import: miPvjB7HH6BN00/icon

export type PlasmicCasinoStripPop__VariantMembers = {};

export type PlasmicCasinoStripPop__VariantsArgs = {};
type VariantPropType = keyof PlasmicCasinoStripPop__VariantsArgs;
export const PlasmicCasinoStripPop__VariantProps = new Array<VariantPropType>();

export type PlasmicCasinoStripPop__ArgsType = {
  casinoInfo?: React.ReactNode;
  playnowBtn?: React.ReactNode;
  gameTypePic?: React.ReactNode;
  gameType?: React.ReactNode;
  gameTypePic2?: React.ReactNode;
  gameType2?: React.ReactNode;
  gameTypePic3?: React.ReactNode;
  gameType3?: React.ReactNode;
  gameTypePic4?: React.ReactNode;
  gameType4?: React.ReactNode;
  providerLogo?: React.ReactNode;
  providerLogo2?: React.ReactNode;
  providerLogo3?: React.ReactNode;
  providerLogo4?: React.ReactNode;
  providerLogo5?: React.ReactNode;
  providerLogo6?: React.ReactNode;
  providerLogo7?: React.ReactNode;
  providerLogo8?: React.ReactNode;
  wager?: React.ReactNode;
  maxCash?: React.ReactNode;
  bonusCode?: React.ReactNode;
  bonusInfo?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCasinoStripPop__ArgsType;
export const PlasmicCasinoStripPop__ArgProps = new Array<ArgPropType>(
  "casinoInfo",
  "playnowBtn",
  "gameTypePic",
  "gameType",
  "gameTypePic2",
  "gameType2",
  "gameTypePic3",
  "gameType3",
  "gameTypePic4",
  "gameType4",
  "providerLogo",
  "providerLogo2",
  "providerLogo3",
  "providerLogo4",
  "providerLogo5",
  "providerLogo6",
  "providerLogo7",
  "providerLogo8",
  "wager",
  "maxCash",
  "bonusCode",
  "bonusInfo",
  "slot7",
  "slot8"
);

export type PlasmicCasinoStripPop__OverridesType = {
  root?: p.Flex<"div">;
  casinoInfo?: p.Flex<"div">;
  depositOptions?: p.Flex<"div">;
  paymentLogos?: p.Flex<typeof PaymentLogos>;
  videoReviewBtn?: p.Flex<typeof VideoReviewBtn>;
  frame1715?: p.Flex<"div">;
  playNowBtn?: p.Flex<typeof PlayNowBtn>;
  casinoFullReviewBtn?: p.Flex<typeof CasinoFullReviewBtn>;
  bestProviders?: p.Flex<"div">;
  bestGames?: p.Flex<typeof BestGames>;
  gameProviders?: p.Flex<typeof GameProviders>;
  bonusInfo?: p.Flex<"div">;
  frame1630?: p.Flex<"div">;
  dots?: p.Flex<"div">;
  frame1839?: p.Flex<"div">;
  frame1838?: p.Flex<"div">;
  icons?: p.Flex<"div">;
  wagering?: p.Flex<typeof Wagering>;
  maxCash?: p.Flex<typeof MaxCash>;
  codeCoupon?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  frame1631?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  _247OnlineAssistance3?: p.Flex<"div">;
  _247OnlineAssistance5?: p.Flex<"div">;
  _247OnlineAssistance7?: p.Flex<"div">;
};

export interface DefaultCasinoStripPopProps {
  casinoInfo?: React.ReactNode;
  playnowBtn?: React.ReactNode;
  gameTypePic?: React.ReactNode;
  gameType?: React.ReactNode;
  gameTypePic2?: React.ReactNode;
  gameType2?: React.ReactNode;
  gameTypePic3?: React.ReactNode;
  gameType3?: React.ReactNode;
  gameTypePic4?: React.ReactNode;
  gameType4?: React.ReactNode;
  providerLogo?: React.ReactNode;
  providerLogo2?: React.ReactNode;
  providerLogo3?: React.ReactNode;
  providerLogo4?: React.ReactNode;
  providerLogo5?: React.ReactNode;
  providerLogo6?: React.ReactNode;
  providerLogo7?: React.ReactNode;
  providerLogo8?: React.ReactNode;
  wager?: React.ReactNode;
  maxCash?: React.ReactNode;
  bonusCode?: React.ReactNode;
  bonusInfo?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  className?: string;
}

function PlasmicCasinoStripPop__RenderFunc(props: {
  variants: PlasmicCasinoStripPop__VariantsArgs;
  args: PlasmicCasinoStripPop__ArgsType;
  overrides: PlasmicCasinoStripPop__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnwCq1TNqK1ZjKa()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"casinoInfo"}
        data-plasmic-override={overrides.casinoInfo}
        hasGap={true}
        className={classNames(projectcss.all, sty.casinoInfo)}
      >
        {(
          hasVariant(globalVariants, "screen", "_1044")
            ? true
            : hasVariant(globalVariants, "screen", "_1200")
            ? true
            : hasVariant(globalVariants, "screen", "max")
            ? true
            : false
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"depositOptions"}
            data-plasmic-override={overrides.depositOptions}
            hasGap={true}
            className={classNames(projectcss.all, sty.depositOptions)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Deposit Options",
              value: args.slot7,
              className: classNames(sty.slotTargetSlot7)
            })}

            {(hasVariant(globalVariants, "screen", "_992") ? true : true) ? (
              <PaymentLogos
                data-plasmic-name={"paymentLogos"}
                data-plasmic-override={overrides.paymentLogos}
                className={classNames("__wab_instance", sty.paymentLogos)}
                slot8={p.renderPlasmicSlot({
                  defaultContents: (
                    <p.Stack
                      as={p.PlasmicImg}
                      hasGap={true}
                      alt={""}
                      className={classNames(sty.img__fsmS9)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"30.359px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_copy_of_cbn_components/images/frame1889.svg",
                        fullWidth: 30.359,
                        fullHeight: 9.844,
                        aspectRatio: 3.1
                      }}
                    />
                  ),

                  value: args.slot8
                })}
              />
            ) : null}
          </p.Stack>
        ) : null}

        <VideoReviewBtn
          data-plasmic-name={"videoReviewBtn"}
          data-plasmic-override={overrides.videoReviewBtn}
          className={classNames("__wab_instance", sty.videoReviewBtn)}
          noBrand={
            hasVariant(globalVariants, "screen", "_1044") ? true : undefined
          }
        />

        {(hasVariant(globalVariants, "screen", "_1044") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h6U
                  )}
                >
                  {
                    "Vivamus porta id nunc eget ultrices. Fusce congue diam a quam porttitor ornare. Donec molestie lacinia mi quis ultrices. Nam non dolor consectetur, auctor orci nec, egestas erat. In justo velit, placerat nec varius eget..."
                  }
                </div>
              ),

              value: args.casinoInfo,
              className: classNames(sty.slotTargetCasinoInfo)
            })
          : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame1715"}
          data-plasmic-override={overrides.frame1715}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1715)}
        >
          {(hasVariant(globalVariants, "screen", "_1044") ? true : true) ? (
            <PlayNowBtn
              data-plasmic-name={"playNowBtn"}
              data-plasmic-override={overrides.playNowBtn}
              className={classNames("__wab_instance", sty.playNowBtn)}
              playnowBtn={p.renderPlasmicSlot({
                defaultContents: "PLay Now",
                value: args.playnowBtn,
                className: classNames(sty.slotTargetPlaynowBtn)
              })}
            />
          ) : null}

          <CasinoFullReviewBtn
            data-plasmic-name={"casinoFullReviewBtn"}
            data-plasmic-override={overrides.casinoFullReviewBtn}
            className={classNames("__wab_instance", sty.casinoFullReviewBtn)}
          />
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"bestProviders"}
        data-plasmic-override={overrides.bestProviders}
        hasGap={true}
        className={classNames(projectcss.all, sty.bestProviders)}
      >
        <BestGames
          data-plasmic-name={"bestGames"}
          data-plasmic-override={overrides.bestGames}
          _3={hasVariant(globalVariants, "screen", "_1200") ? true : undefined}
          className={classNames("__wab_instance", sty.bestGames)}
          gameType={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType
          })}
          gameType2={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType2
          })}
          gameType3={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType3
          })}
          gameType4={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType4
          })}
          gameTypePic={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg___0thXz)}
                role={"img"}
              />
            ),

            value: args.gameTypePic
          })}
          gameTypePic2={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg___39I8S)}
                role={"img"}
              />
            ),

            value: args.gameTypePic2
          })}
          gameTypePic3={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg__yltyz)}
                role={"img"}
              />
            ),

            value: args.gameTypePic3
          })}
          gameTypePic4={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg___7Oq3Q)}
                role={"img"}
              />
            ),

            value: args.gameTypePic4
          })}
        />

        <GameProviders
          data-plasmic-name={"gameProviders"}
          data-plasmic-override={overrides.gameProviders}
          _3={hasVariant(globalVariants, "screen", "_1200") ? true : undefined}
          className={classNames("__wab_instance", sty.gameProviders)}
          providerLogo={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__dnpuy)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo
          })}
          providerLogo2={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__lJ5Rf)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo2
          })}
          providerLogo3={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pjSNn)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo3
          })}
          providerLogo4={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___9R0Ix)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo4
          })}
          providerLogo5={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mrIz3)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo5
          })}
          providerLogo6={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__lRoHz)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo6
          })}
          providerLogo7={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__tpm94)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo7
          })}
          providerLogo8={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fd95Z)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                  fullWidth: 617,
                  fullHeight: 110,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.providerLogo8
          })}
        />
      </p.Stack>

      {true ? (
        <div
          data-plasmic-name={"bonusInfo"}
          data-plasmic-override={overrides.bonusInfo}
          className={classNames(projectcss.all, sty.bonusInfo)}
        >
          {true ? (
            <div
              data-plasmic-name={"frame1630"}
              data-plasmic-override={overrides.frame1630}
              className={classNames(projectcss.all, sty.frame1630)}
            >
              {true ? (
                <div
                  data-plasmic-name={"dots"}
                  data-plasmic-override={overrides.dots}
                  className={classNames(projectcss.all, sty.dots)}
                />
              ) : null}
            </div>
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cxkvE
            )}
          >
            {"Bonus Information"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame1839"}
            data-plasmic-override={overrides.frame1839}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1839)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1838"}
              data-plasmic-override={overrides.frame1838}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1838)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"icons"}
                data-plasmic-override={overrides.icons}
                hasGap={true}
                className={classNames(projectcss.all, sty.icons)}
              >
                <Wagering
                  data-plasmic-name={"wagering"}
                  data-plasmic-override={overrides.wagering}
                  className={classNames("__wab_instance", sty.wagering)}
                  wager={p.renderPlasmicSlot({
                    defaultContents: "X40",
                    value: args.wager
                  })}
                />

                <MaxCash
                  data-plasmic-name={"maxCash"}
                  data-plasmic-override={overrides.maxCash}
                  className={classNames("__wab_instance", sty.maxCash)}
                  maxCash={p.renderPlasmicSlot({
                    defaultContents: "$60",
                    value: args.maxCash
                  })}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"codeCoupon"}
                data-plasmic-override={overrides.codeCoupon}
                hasGap={true}
                className={classNames(projectcss.all, sty.codeCoupon)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "BONUSCODE#",
                  value: args.bonusCode,
                  className: classNames(sty.slotTargetBonusCode)
                })}

                <FrameIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </p.Stack>
            </p.Stack>

            <div
              data-plasmic-name={"frame1631"}
              data-plasmic-override={overrides.frame1631}
              className={classNames(projectcss.all, sty.frame1631)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jJmYz
                    )}
                  >
                    {
                      "Vivamus porta id nunc eget ultrices. Fusce congue diam a quam porttitor ornare. Donec molestie lacinia mi quis ultrices. Nam non dolor consectetur, auctor orci nec egestas erat. In justo velit, placerat nec varius eget..."
                    }
                  </div>
                ),

                value: args.bonusInfo,
                className: classNames(sty.slotTargetBonusInfo)
              })}
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <ProsCons
                  className={classNames("__wab_instance", sty.prosCons__aK9Cd)}
                  info={
                    <div
                      data-plasmic-name={"_247OnlineAssistance3"}
                      data-plasmic-override={overrides._247OnlineAssistance3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty._247OnlineAssistance3
                      )}
                    >
                      {"18+"}
                    </div>
                  }
                />

                <ProsCons
                  className={classNames("__wab_instance", sty.prosCons__qw51)}
                  info={
                    <div
                      data-plasmic-name={"_247OnlineAssistance5"}
                      data-plasmic-override={overrides._247OnlineAssistance5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty._247OnlineAssistance5
                      )}
                    >
                      {"New Players Only"}
                    </div>
                  }
                />

                <ProsCons
                  className={classNames("__wab_instance", sty.prosCons__qZ6Gf)}
                  info={
                    <div
                      data-plasmic-name={"_247OnlineAssistance7"}
                      data-plasmic-override={overrides._247OnlineAssistance7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty._247OnlineAssistance7
                      )}
                    >
                      {"Full Terms Apply"}
                    </div>
                  }
                />
              </p.Stack>
            ) : null}
          </p.Stack>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b3Kte
            )}
          >
            {"more bonuses"}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "casinoInfo",
    "depositOptions",
    "paymentLogos",
    "videoReviewBtn",
    "frame1715",
    "playNowBtn",
    "casinoFullReviewBtn",
    "bestProviders",
    "bestGames",
    "gameProviders",
    "bonusInfo",
    "frame1630",
    "dots",
    "frame1839",
    "frame1838",
    "icons",
    "wagering",
    "maxCash",
    "codeCoupon",
    "svg",
    "frame1631",
    "freeBox",
    "_247OnlineAssistance3",
    "_247OnlineAssistance5",
    "_247OnlineAssistance7"
  ],
  casinoInfo: [
    "casinoInfo",
    "depositOptions",
    "paymentLogos",
    "videoReviewBtn",
    "frame1715",
    "playNowBtn",
    "casinoFullReviewBtn"
  ],
  depositOptions: ["depositOptions", "paymentLogos"],
  paymentLogos: ["paymentLogos"],
  videoReviewBtn: ["videoReviewBtn"],
  frame1715: ["frame1715", "playNowBtn", "casinoFullReviewBtn"],
  playNowBtn: ["playNowBtn"],
  casinoFullReviewBtn: ["casinoFullReviewBtn"],
  bestProviders: ["bestProviders", "bestGames", "gameProviders"],
  bestGames: ["bestGames"],
  gameProviders: ["gameProviders"],
  bonusInfo: [
    "bonusInfo",
    "frame1630",
    "dots",
    "frame1839",
    "frame1838",
    "icons",
    "wagering",
    "maxCash",
    "codeCoupon",
    "svg",
    "frame1631",
    "freeBox",
    "_247OnlineAssistance3",
    "_247OnlineAssistance5",
    "_247OnlineAssistance7"
  ],
  frame1630: ["frame1630", "dots"],
  dots: ["dots"],
  frame1839: [
    "frame1839",
    "frame1838",
    "icons",
    "wagering",
    "maxCash",
    "codeCoupon",
    "svg",
    "frame1631",
    "freeBox",
    "_247OnlineAssistance3",
    "_247OnlineAssistance5",
    "_247OnlineAssistance7"
  ],
  frame1838: ["frame1838", "icons", "wagering", "maxCash", "codeCoupon", "svg"],
  icons: ["icons", "wagering", "maxCash"],
  wagering: ["wagering"],
  maxCash: ["maxCash"],
  codeCoupon: ["codeCoupon", "svg"],
  svg: ["svg"],
  frame1631: ["frame1631"],
  freeBox: [
    "freeBox",
    "_247OnlineAssistance3",
    "_247OnlineAssistance5",
    "_247OnlineAssistance7"
  ],
  _247OnlineAssistance3: ["_247OnlineAssistance3"],
  _247OnlineAssistance5: ["_247OnlineAssistance5"],
  _247OnlineAssistance7: ["_247OnlineAssistance7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  casinoInfo: "div";
  depositOptions: "div";
  paymentLogos: typeof PaymentLogos;
  videoReviewBtn: typeof VideoReviewBtn;
  frame1715: "div";
  playNowBtn: typeof PlayNowBtn;
  casinoFullReviewBtn: typeof CasinoFullReviewBtn;
  bestProviders: "div";
  bestGames: typeof BestGames;
  gameProviders: typeof GameProviders;
  bonusInfo: "div";
  frame1630: "div";
  dots: "div";
  frame1839: "div";
  frame1838: "div";
  icons: "div";
  wagering: typeof Wagering;
  maxCash: typeof MaxCash;
  codeCoupon: "div";
  svg: "svg";
  frame1631: "div";
  freeBox: "div";
  _247OnlineAssistance3: "div";
  _247OnlineAssistance5: "div";
  _247OnlineAssistance7: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCasinoStripPop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCasinoStripPop__VariantsArgs;
    args?: PlasmicCasinoStripPop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCasinoStripPop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCasinoStripPop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCasinoStripPop__ArgProps,
      internalVariantPropNames: PlasmicCasinoStripPop__VariantProps
    });

    return PlasmicCasinoStripPop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCasinoStripPop";
  } else {
    func.displayName = `PlasmicCasinoStripPop.${nodeName}`;
  }
  return func;
}

export const PlasmicCasinoStripPop = Object.assign(
  // Top-level PlasmicCasinoStripPop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    casinoInfo: makeNodeComponent("casinoInfo"),
    depositOptions: makeNodeComponent("depositOptions"),
    paymentLogos: makeNodeComponent("paymentLogos"),
    videoReviewBtn: makeNodeComponent("videoReviewBtn"),
    frame1715: makeNodeComponent("frame1715"),
    playNowBtn: makeNodeComponent("playNowBtn"),
    casinoFullReviewBtn: makeNodeComponent("casinoFullReviewBtn"),
    bestProviders: makeNodeComponent("bestProviders"),
    bestGames: makeNodeComponent("bestGames"),
    gameProviders: makeNodeComponent("gameProviders"),
    bonusInfo: makeNodeComponent("bonusInfo"),
    frame1630: makeNodeComponent("frame1630"),
    dots: makeNodeComponent("dots"),
    frame1839: makeNodeComponent("frame1839"),
    frame1838: makeNodeComponent("frame1838"),
    icons: makeNodeComponent("icons"),
    wagering: makeNodeComponent("wagering"),
    maxCash: makeNodeComponent("maxCash"),
    codeCoupon: makeNodeComponent("codeCoupon"),
    svg: makeNodeComponent("svg"),
    frame1631: makeNodeComponent("frame1631"),
    freeBox: makeNodeComponent("freeBox"),
    _247OnlineAssistance3: makeNodeComponent("_247OnlineAssistance3"),
    _247OnlineAssistance5: makeNodeComponent("_247OnlineAssistance5"),
    _247OnlineAssistance7: makeNodeComponent("_247OnlineAssistance7"),

    // Metadata about props expected for PlasmicCasinoStripPop
    internalVariantProps: PlasmicCasinoStripPop__VariantProps,
    internalArgProps: PlasmicCasinoStripPop__ArgProps
  }
);

export default PlasmicCasinoStripPop;
/* prettier-ignore-end */
