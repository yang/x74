// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: M-C0j1W8HBKA_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Check from "../../Check"; // plasmic-import: 5sobSnzMI4HNK/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicProsCons.module.css"; // plasmic-import: M-C0j1W8HBKA_/css

export type PlasmicProsCons__VariantMembers = {
  cons: "cons";
  pros: "pros";
};

export type PlasmicProsCons__VariantsArgs = {
  cons?: SingleBooleanChoiceArg<"cons">;
  pros?: SingleBooleanChoiceArg<"pros">;
};

type VariantPropType = keyof PlasmicProsCons__VariantsArgs;
export const PlasmicProsCons__VariantProps = new Array<VariantPropType>(
  "cons",
  "pros"
);

export type PlasmicProsCons__ArgsType = {
  info?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProsCons__ArgsType;
export const PlasmicProsCons__ArgProps = new Array<ArgPropType>("info");

export type PlasmicProsCons__OverridesType = {
  root?: p.Flex<"div">;
  check?: p.Flex<typeof Check>;
};

export interface DefaultProsConsProps {
  info?: React.ReactNode;
  cons?: SingleBooleanChoiceArg<"cons">;
  pros?: SingleBooleanChoiceArg<"pros">;
  className?: string;
}

function PlasmicProsCons__RenderFunc(props: {
  variants: PlasmicProsCons__VariantsArgs;
  args: PlasmicProsCons__ArgsType;
  overrides: PlasmicProsCons__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootcons]: hasVariant(variants, "cons", "cons"),
          [sty.rootpros]: hasVariant(variants, "pros", "pros")
        }
      )}
    >
      <Check
        data-plasmic-name={"check"}
        data-plasmic-override={overrides.check}
        bad={hasVariant(variants, "cons", "cons") ? true : undefined}
        className={classNames("__wab_instance", sty.check, {
          [sty.checkcons]: hasVariant(variants, "cons", "cons"),
          [sty.checkpros]: hasVariant(variants, "pros", "pros")
        })}
        good={hasVariant(variants, "pros", "pros") ? true : undefined}
      />

      {p.renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__csFWo
            )}
          >
            {"Online assistance"}
          </div>
        ),

        value: args.info,
        className: classNames(sty.slotTargetInfo, {
          [sty.slotTargetInfocons]: hasVariant(variants, "cons", "cons"),
          [sty.slotTargetInfopros]: hasVariant(variants, "pros", "pros")
        })
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "check"],
  check: ["check"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  check: typeof Check;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProsCons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProsCons__VariantsArgs;
    args?: PlasmicProsCons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProsCons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProsCons__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProsCons__ArgProps,
      internalVariantPropNames: PlasmicProsCons__VariantProps
    });

    return PlasmicProsCons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProsCons";
  } else {
    func.displayName = `PlasmicProsCons.${nodeName}`;
  }
  return func;
}

export const PlasmicProsCons = Object.assign(
  // Top-level PlasmicProsCons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    check: makeNodeComponent("check"),

    // Metadata about props expected for PlasmicProsCons
    internalVariantProps: PlasmicProsCons__VariantProps,
    internalArgProps: PlasmicProsCons__ArgProps
  }
);

export default PlasmicProsCons;
/* prettier-ignore-end */
