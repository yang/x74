// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: yVknrskS1_dKQA
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import GeoBtn from "../../GeoBtn"; // plasmic-import: yX0kYWItvY_O_m/component
import BonusProp from "../../BonusProp"; // plasmic-import: NTeLDgCmA5MpZC/component

import { useScreenVariants as useScreenVariantsnwCq1TNqK1ZjKa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NWCq1TNqK1ZjKa/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicBonusCpa.module.css"; // plasmic-import: yVknrskS1_dKQA/css

import SubtractIcon from "./icons/PlasmicIcon__Subtract"; // plasmic-import: GcwBRPfmK1GGr4/icon

export type PlasmicBonusCpa__VariantMembers = {
  small: "small";
};

export type PlasmicBonusCpa__VariantsArgs = {
  small?: SingleBooleanChoiceArg<"small">;
};

type VariantPropType = keyof PlasmicBonusCpa__VariantsArgs;
export const PlasmicBonusCpa__VariantProps = new Array<VariantPropType>(
  "small"
);

export type PlasmicBonusCpa__ArgsType = {
  bonusName?: React.ReactNode;
  cpaBtn?: React.ReactNode;
  countryFlag?: React.ReactNode;
  slot4?: React.ReactNode;
  slot3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBonusCpa__ArgsType;
export const PlasmicBonusCpa__ArgProps = new Array<ArgPropType>(
  "bonusName",
  "cpaBtn",
  "countryFlag",
  "slot4",
  "slot3",
  "slot5",
  "slot6"
);

export type PlasmicBonusCpa__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  img?: p.Flex<typeof p.PlasmicImg>;
  cta?: p.Flex<"div">;
  geoBtn?: p.Flex<typeof GeoBtn>;
  bonusProp?: p.Flex<typeof BonusProp>;
  text?: p.Flex<"div">;
};

export interface DefaultBonusCpaProps {
  bonusName?: React.ReactNode;
  cpaBtn?: React.ReactNode;
  countryFlag?: React.ReactNode;
  slot4?: React.ReactNode;
  slot3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  small?: SingleBooleanChoiceArg<"small">;
  className?: string;
}

function PlasmicBonusCpa__RenderFunc(props: {
  variants: PlasmicBonusCpa__VariantsArgs;
  args: PlasmicBonusCpa__ArgsType;
  overrides: PlasmicBonusCpa__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnwCq1TNqK1ZjKa()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.rootsmall]: hasVariant(variants, "small", "small") }
      )}
    >
      {(
        hasVariant(variants, "small", "small")
          ? true
          : hasVariant(globalVariants, "screen", "_1200")
          ? true
          : true
      ) ? (
        <SubtractIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgsmall]: hasVariant(variants, "small", "small")
          })}
          role={"img"}
        />
      ) : null}
      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgsmall]: hasVariant(variants, "small", "small")
          })}
          displayHeight={"68px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"68px" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/copy_of_copy_of_cbn_components/images/exclusive.svg",
            fullWidth: 68.066,
            fullHeight: 68.066,
            aspectRatio: 0.974359
          }}
        />
      ) : null}
      {(hasVariant(variants, "small", "small") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"cta"}
          data-plasmic-override={overrides.cta}
          hasGap={true}
          className={classNames(projectcss.all, sty.cta, {
            [sty.ctasmall]: hasVariant(variants, "small", "small")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q3Qav
                )}
              >
                {"no deposit BONUS"}
              </div>
            ),

            value: args.bonusName,
            className: classNames(sty.slotTargetBonusName)
          })}

          <GeoBtn
            data-plasmic-name={"geoBtn"}
            data-plasmic-override={overrides.geoBtn}
            className={classNames("__wab_instance", sty.geoBtn)}
            countryFlag={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__lqGt)}
                  displayHeight={"26px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"26px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/flagHolder.svg",
                    fullWidth: 26,
                    fullHeight: 26,
                    aspectRatio: 1
                  }}
                />
              ),

              value: args.countryFlag
            })}
            cpaBtn={p.renderPlasmicSlot({
              defaultContents: "PLAY",
              value: args.cpaBtn
            })}
          />
        </p.Stack>
      ) : null}

      <BonusProp
        data-plasmic-name={"bonusProp"}
        data-plasmic-override={overrides.bonusProp}
        bonusLine1={p.renderPlasmicSlot({
          defaultContents: "400% up to",
          value: args.slot3
        })}
        bonusLine2={p.renderPlasmicSlot({
          defaultContents: "$4,000",
          value: args.slot4
        })}
        bonusLine3={p.renderPlasmicSlot({
          defaultContents: "+ 100 Free Spins",
          value: args.slot5
        })}
        bonusLine4={p.renderPlasmicSlot({
          defaultContents: "on Cleopatraâ€™s Gold",
          value: args.slot6
        })}
        bonusName={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"no deposit bonus"}
          </div>
        }
        className={classNames("__wab_instance", sty.bonusProp, {
          [sty.bonusPropsmall]: hasVariant(variants, "small", "small")
        })}
        small={hasVariant(variants, "small", "small") ? true : undefined}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "img", "cta", "geoBtn", "bonusProp", "text"],
  svg: ["svg"],
  img: ["img"],
  cta: ["cta", "geoBtn"],
  geoBtn: ["geoBtn"],
  bonusProp: ["bonusProp", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  img: typeof p.PlasmicImg;
  cta: "div";
  geoBtn: typeof GeoBtn;
  bonusProp: typeof BonusProp;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBonusCpa__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBonusCpa__VariantsArgs;
    args?: PlasmicBonusCpa__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBonusCpa__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBonusCpa__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBonusCpa__ArgProps,
      internalVariantPropNames: PlasmicBonusCpa__VariantProps
    });

    return PlasmicBonusCpa__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBonusCpa";
  } else {
    func.displayName = `PlasmicBonusCpa.${nodeName}`;
  }
  return func;
}

export const PlasmicBonusCpa = Object.assign(
  // Top-level PlasmicBonusCpa renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    cta: makeNodeComponent("cta"),
    geoBtn: makeNodeComponent("geoBtn"),
    bonusProp: makeNodeComponent("bonusProp"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicBonusCpa
    internalVariantProps: PlasmicBonusCpa__VariantProps,
    internalArgProps: PlasmicBonusCpa__ArgProps
  }
);

export default PlasmicBonusCpa;
/* prettier-ignore-end */
