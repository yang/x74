// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: _HUkNMOFGj56Vi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import GameType from "../../GameType"; // plasmic-import: t9FaXeqxhN2U-R/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicBestGames.module.css"; // plasmic-import: _HUkNMOFGj56Vi/css

import Frame1593Icon from "./icons/PlasmicIcon__Frame1593"; // plasmic-import: 90uvfieAr7FyhJ/icon

export type PlasmicBestGames__VariantMembers = {
  _3: "_3";
};

export type PlasmicBestGames__VariantsArgs = {
  _3?: SingleBooleanChoiceArg<"_3">;
};

type VariantPropType = keyof PlasmicBestGames__VariantsArgs;
export const PlasmicBestGames__VariantProps = new Array<VariantPropType>("_3");

export type PlasmicBestGames__ArgsType = {
  gameTypePic?: React.ReactNode;
  gameType?: React.ReactNode;
  gameTypePic2?: React.ReactNode;
  gameType2?: React.ReactNode;
  gameTypePic3?: React.ReactNode;
  gameType3?: React.ReactNode;
  gameTypePic4?: React.ReactNode;
  gameType4?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBestGames__ArgsType;
export const PlasmicBestGames__ArgProps = new Array<ArgPropType>(
  "gameTypePic",
  "gameType",
  "gameTypePic2",
  "gameType2",
  "gameTypePic3",
  "gameType3",
  "gameTypePic4",
  "gameType4"
);

export type PlasmicBestGames__OverridesType = {
  root?: p.Flex<"div">;
  frame1626?: p.Flex<"div">;
  frame1618?: p.Flex<"div">;
};

export interface DefaultBestGamesProps {
  gameTypePic?: React.ReactNode;
  gameType?: React.ReactNode;
  gameTypePic2?: React.ReactNode;
  gameType2?: React.ReactNode;
  gameTypePic3?: React.ReactNode;
  gameType3?: React.ReactNode;
  gameTypePic4?: React.ReactNode;
  gameType4?: React.ReactNode;
  _3?: SingleBooleanChoiceArg<"_3">;
  className?: string;
}

function PlasmicBestGames__RenderFunc(props: {
  variants: PlasmicBestGames__VariantsArgs;
  args: PlasmicBestGames__ArgsType;
  overrides: PlasmicBestGames__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame1626"}
        data-plasmic-override={overrides.frame1626}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1626)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hfrl
          )}
        >
          {"Best Casino Games"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__doByT
          )}
        >
          {"show all"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame1618"}
        data-plasmic-override={overrides.frame1618}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1618)}
      >
        <GameType
          className={classNames("__wab_instance", sty.gameType__l7I3Z)}
          gameType={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType
          })}
          gameTypePic={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg__pwntk)}
                role={"img"}
              />
            ),

            value: args.gameTypePic
          })}
        />

        <GameType
          className={classNames("__wab_instance", sty.gameType__jj8Oq)}
          gameType={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType2
          })}
          gameTypePic={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg__kzbr5)}
                role={"img"}
              />
            ),

            value: args.gameTypePic2
          })}
        />

        <GameType
          className={classNames("__wab_instance", sty.gameType__agFkZ, {
            [sty.gameType_3__agFkZ4UaGv]: hasVariant(variants, "_3", "_3")
          })}
          gameType={p.renderPlasmicSlot({
            defaultContents: "Slots",
            value: args.gameType3
          })}
          gameTypePic={p.renderPlasmicSlot({
            defaultContents: (
              <Frame1593Icon
                className={classNames(projectcss.all, sty.svg__tjlpO)}
                role={"img"}
              />
            ),

            value: args.gameTypePic3
          })}
        />

        {(hasVariant(variants, "_3", "_3") ? true : true) ? (
          <GameType
            className={classNames("__wab_instance", sty.gameType__eIjWs, {
              [sty.gameType_3__eIjWs4UaGv]: hasVariant(variants, "_3", "_3")
            })}
            gameType={p.renderPlasmicSlot({
              defaultContents: "Slots",
              value: args.gameType4
            })}
            gameTypePic={p.renderPlasmicSlot({
              defaultContents: (
                <Frame1593Icon
                  className={classNames(projectcss.all, sty.svg__p6Z5E)}
                  role={"img"}
                />
              ),

              value: args.gameTypePic4
            })}
          />
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "frame1626", "frame1618"],
  frame1626: ["frame1626"],
  frame1618: ["frame1618"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame1626: "div";
  frame1618: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBestGames__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBestGames__VariantsArgs;
    args?: PlasmicBestGames__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBestGames__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBestGames__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBestGames__ArgProps,
      internalVariantPropNames: PlasmicBestGames__VariantProps
    });

    return PlasmicBestGames__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBestGames";
  } else {
    func.displayName = `PlasmicBestGames.${nodeName}`;
  }
  return func;
}

export const PlasmicBestGames = Object.assign(
  // Top-level PlasmicBestGames renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame1626: makeNodeComponent("frame1626"),
    frame1618: makeNodeComponent("frame1618"),

    // Metadata about props expected for PlasmicBestGames
    internalVariantProps: PlasmicBestGames__VariantProps,
    internalArgProps: PlasmicBestGames__ArgProps
  }
);

export default PlasmicBestGames;
/* prettier-ignore-end */
