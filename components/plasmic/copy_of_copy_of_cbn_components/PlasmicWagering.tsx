// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: 8IdaqiyysNfTVQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicWagering.module.css"; // plasmic-import: 8IdaqiyysNfTVQ/css

export type PlasmicWagering__VariantMembers = {};

export type PlasmicWagering__VariantsArgs = {};
type VariantPropType = keyof PlasmicWagering__VariantsArgs;
export const PlasmicWagering__VariantProps = new Array<VariantPropType>();

export type PlasmicWagering__ArgsType = {
  wager?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWagering__ArgsType;
export const PlasmicWagering__ArgProps = new Array<ArgPropType>("wager");

export type PlasmicWagering__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  frame1588?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultWageringProps {
  wager?: React.ReactNode;
  className?: string;
}

function PlasmicWagering__RenderFunc(props: {
  variants: PlasmicWagering__VariantsArgs;
  args: PlasmicWagering__ArgsType;
  overrides: PlasmicWagering__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"25px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"25px" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/copy_of_copy_of_cbn_components/images/group1632.svg",
          fullWidth: 23.958,
          fullHeight: 23.958,
          aspectRatio: 1
        }}
      />

      <div
        data-plasmic-name={"frame1588"}
        data-plasmic-override={overrides.frame1588}
        className={classNames(projectcss.all, sty.frame1588)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "X40",
            value: args.wager,
            className: classNames(sty.slotTargetWager)
          })}
        </div>

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Wagering"}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "frame1588", "freeBox", "text"],
  img: ["img"],
  frame1588: ["frame1588", "freeBox", "text"],
  freeBox: ["freeBox"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  frame1588: "div";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWagering__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWagering__VariantsArgs;
    args?: PlasmicWagering__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWagering__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWagering__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWagering__ArgProps,
      internalVariantPropNames: PlasmicWagering__VariantProps
    });

    return PlasmicWagering__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWagering";
  } else {
    func.displayName = `PlasmicWagering.${nodeName}`;
  }
  return func;
}

export const PlasmicWagering = Object.assign(
  // Top-level PlasmicWagering renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    frame1588: makeNodeComponent("frame1588"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicWagering
    internalVariantProps: PlasmicWagering__VariantProps,
    internalArgProps: PlasmicWagering__ArgProps
  }
);

export default PlasmicWagering;
/* prettier-ignore-end */
