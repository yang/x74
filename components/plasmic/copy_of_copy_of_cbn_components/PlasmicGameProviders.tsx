// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: -BY7quCuv_EdY_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ProviderLogo from "../../ProviderLogo"; // plasmic-import: 2ko9HLxRDvrKgQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicGameProviders.module.css"; // plasmic-import: -BY7quCuv_EdY_/css

export type PlasmicGameProviders__VariantMembers = {
  _3: "_3";
};

export type PlasmicGameProviders__VariantsArgs = {
  _3?: SingleBooleanChoiceArg<"_3">;
};

type VariantPropType = keyof PlasmicGameProviders__VariantsArgs;
export const PlasmicGameProviders__VariantProps = new Array<VariantPropType>(
  "_3"
);

export type PlasmicGameProviders__ArgsType = {
  providerLogo?: React.ReactNode;
  providerLogo2?: React.ReactNode;
  providerLogo3?: React.ReactNode;
  providerLogo4?: React.ReactNode;
  providerLogo5?: React.ReactNode;
  providerLogo6?: React.ReactNode;
  providerLogo7?: React.ReactNode;
  providerLogo8?: React.ReactNode;
};

type ArgPropType = keyof PlasmicGameProviders__ArgsType;
export const PlasmicGameProviders__ArgProps = new Array<ArgPropType>(
  "providerLogo",
  "providerLogo2",
  "providerLogo3",
  "providerLogo4",
  "providerLogo5",
  "providerLogo6",
  "providerLogo7",
  "providerLogo8"
);

export type PlasmicGameProviders__OverridesType = {
  root?: p.Flex<"div">;
  frame1627?: p.Flex<"div">;
  frame1716?: p.Flex<"div">;
  frame1619?: p.Flex<"div">;
};

export interface DefaultGameProvidersProps {
  providerLogo?: React.ReactNode;
  providerLogo2?: React.ReactNode;
  providerLogo3?: React.ReactNode;
  providerLogo4?: React.ReactNode;
  providerLogo5?: React.ReactNode;
  providerLogo6?: React.ReactNode;
  providerLogo7?: React.ReactNode;
  providerLogo8?: React.ReactNode;
  _3?: SingleBooleanChoiceArg<"_3">;
  className?: string;
}

function PlasmicGameProviders__RenderFunc(props: {
  variants: PlasmicGameProviders__VariantsArgs;
  args: PlasmicGameProviders__ArgsType;
  overrides: PlasmicGameProviders__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.root_3]: hasVariant(variants, "_3", "_3") }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame1627"}
        data-plasmic-override={overrides.frame1627}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1627, {
          [sty.frame1627_3]: hasVariant(variants, "_3", "_3")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ahlM
          )}
        >
          {"Popular Game Providers"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uWrAj
          )}
        >
          {"show all"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame1716"}
        data-plasmic-override={overrides.frame1716}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1716)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame1619"}
          data-plasmic-override={overrides.frame1619}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1619, {
            [sty.frame1619_3]: hasVariant(variants, "_3", "_3")
          })}
        >
          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo__wrjy9)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___1XLLm)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo__agjm1)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zhBdq)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo2
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo__tqTJ)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___2QYI)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo3
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo___3Yxbj)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__xG8Q)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo4
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo__zWk8U)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___1RfXz)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo5
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo___80Djv, {
              [sty.providerLogo_3___80DjvglhjA]: hasVariant(
                variants,
                "_3",
                "_3"
              )
            })}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__u9JqF)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo6
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo__eWaHw)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cW8VX)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo7
            })}
          />

          <ProviderLogo
            className={classNames("__wab_instance", sty.providerLogo__fio5T)}
            providerLogo={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___44Uo)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/image.png",
                    fullWidth: 617,
                    fullHeight: 110,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.providerLogo8
            })}
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "frame1627", "frame1716", "frame1619"],
  frame1627: ["frame1627"],
  frame1716: ["frame1716", "frame1619"],
  frame1619: ["frame1619"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame1627: "div";
  frame1716: "div";
  frame1619: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGameProviders__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGameProviders__VariantsArgs;
    args?: PlasmicGameProviders__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGameProviders__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGameProviders__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGameProviders__ArgProps,
      internalVariantPropNames: PlasmicGameProviders__VariantProps
    });

    return PlasmicGameProviders__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGameProviders";
  } else {
    func.displayName = `PlasmicGameProviders.${nodeName}`;
  }
  return func;
}

export const PlasmicGameProviders = Object.assign(
  // Top-level PlasmicGameProviders renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame1627: makeNodeComponent("frame1627"),
    frame1716: makeNodeComponent("frame1716"),
    frame1619: makeNodeComponent("frame1619"),

    // Metadata about props expected for PlasmicGameProviders
    internalVariantProps: PlasmicGameProviders__VariantProps,
    internalArgProps: PlasmicGameProviders__ArgProps
  }
);

export default PlasmicGameProviders;
/* prettier-ignore-end */
