// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: -myEglF4GANrLY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BrandBox from "../../BrandBox"; // plasmic-import: 2_hTV3Sfsq3o8U/component
import CasinoBadge from "../../CasinoBadge"; // plasmic-import: yyGss2xztyl36/component
import RatingBox from "../../RatingBox"; // plasmic-import: Q-luTSlmtgyad-/component
import ProsCons from "../../ProsCons"; // plasmic-import: M-C0j1W8HBKA_/component
import PaymentLogos from "../../PaymentLogos"; // plasmic-import: iAwocRK-9KdmRe/component
import BonusCpa from "../../BonusCpa"; // plasmic-import: yVknrskS1_dKQA/component
import BonusProp from "../../BonusProp"; // plasmic-import: NTeLDgCmA5MpZC/component

import { useScreenVariants as useScreenVariantsnwCq1TNqK1ZjKa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NWCq1TNqK1ZjKa/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicCasinoStrip.module.css"; // plasmic-import: -myEglF4GANrLY/css

export type PlasmicCasinoStrip__VariantMembers = {};

export type PlasmicCasinoStrip__VariantsArgs = {};
type VariantPropType = keyof PlasmicCasinoStrip__VariantsArgs;
export const PlasmicCasinoStrip__VariantProps = new Array<VariantPropType>();

export type PlasmicCasinoStrip__ArgsType = {
  slot22?: React.ReactNode;
  slot20?: React.ReactNode;
  slot21?: React.ReactNode;
  _247OnlineAssistance2?: React.ReactNode;
  _247OnlineAssistance4?: React.ReactNode;
  _247OnlineAssistance6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot4?: React.ReactNode;
  slot3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCasinoStrip__ArgsType;
export const PlasmicCasinoStrip__ArgProps = new Array<ArgPropType>(
  "slot22",
  "slot20",
  "slot21",
  "_247OnlineAssistance2",
  "_247OnlineAssistance4",
  "_247OnlineAssistance6",
  "slot7",
  "slot8",
  "slot",
  "children",
  "slot2",
  "slot4",
  "slot3",
  "slot5",
  "slot6"
);

export type PlasmicCasinoStrip__OverridesType = {
  root?: p.Flex<"div">;
  brandBox?: p.Flex<typeof BrandBox>;
  brandImg?: p.Flex<typeof p.PlasmicImg>;
  ratingProsCons?: p.Flex<"div">;
  userRating?: p.Flex<"div">;
  casinoBadge?: p.Flex<typeof CasinoBadge>;
  ratingBox?: p.Flex<typeof RatingBox>;
  reviewBtn?: p.Flex<"div">;
  depositOptions?: p.Flex<"div">;
  paymentLogos?: p.Flex<typeof PaymentLogos>;
  bonusCpa?: p.Flex<typeof BonusCpa>;
  bonusProp?: p.Flex<typeof BonusProp>;
};

export interface DefaultCasinoStripProps {
  slot22?: React.ReactNode;
  slot20?: React.ReactNode;
  slot21?: React.ReactNode;
  _247OnlineAssistance2?: React.ReactNode;
  _247OnlineAssistance4?: React.ReactNode;
  _247OnlineAssistance6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot4?: React.ReactNode;
  slot3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  className?: string;
}

function PlasmicCasinoStrip__RenderFunc(props: {
  variants: PlasmicCasinoStrip__VariantsArgs;
  args: PlasmicCasinoStrip__ArgsType;
  overrides: PlasmicCasinoStrip__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnwCq1TNqK1ZjKa()
  });

  return (
    (hasVariant(globalVariants, "screen", "_496") ? true : true) ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <BrandBox
          data-plasmic-name={"brandBox"}
          data-plasmic-override={overrides.brandBox}
          badge={
            hasVariant(globalVariants, "screen", "_768")
              ? undefined
              : hasVariant(globalVariants, "screen", "_992")
              ? true
              : hasVariant(globalVariants, "screen", "_1200")
              ? undefined
              : hasVariant(globalVariants, "screen", "max")
              ? true
              : true
          }
          brandImage={
            <p.PlasmicImg
              data-plasmic-name={"brandImg"}
              data-plasmic-override={overrides.brandImg}
              alt={""}
              class={"" as const}
              className={classNames(sty.brandImg, "" as const)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              {...{ "lazy-load=yes": "" as const }}
              loading={"lazy" as const}
            />
          }
          className={classNames("__wab_instance", sty.brandBox)}
          place={true}
          slot22={p.renderPlasmicSlot({
            defaultContents: "Ozwin Casino - Review",
            value: args.slot22
          })}
        />

        {(hasVariant(globalVariants, "screen", "_650") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"ratingProsCons"}
            data-plasmic-override={overrides.ratingProsCons}
            hasGap={true}
            className={classNames(projectcss.all, sty.ratingProsCons)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"userRating"}
              data-plasmic-override={overrides.userRating}
              hasGap={true}
              className={classNames(projectcss.all, sty.userRating)}
            >
              {(
                hasVariant(globalVariants, "screen", "_768")
                  ? true
                  : hasVariant(globalVariants, "screen", "_992")
                  ? true
                  : hasVariant(globalVariants, "screen", "_1200")
                  ? true
                  : hasVariant(globalVariants, "screen", "max")
                  ? true
                  : true
              ) ? (
                <CasinoBadge
                  data-plasmic-name={"casinoBadge"}
                  data-plasmic-override={overrides.casinoBadge}
                  className={classNames("__wab_instance", sty.casinoBadge)}
                />
              ) : null}
              {true ? (
                <RatingBox
                  data-plasmic-name={"ratingBox"}
                  data-plasmic-override={overrides.ratingBox}
                  className={classNames("__wab_instance", sty.ratingBox)}
                  horisonatal={
                    hasVariant(globalVariants, "screen", "_1200")
                      ? true
                      : hasVariant(globalVariants, "screen", "max")
                      ? undefined
                      : undefined
                  }
                  slot20={p.renderPlasmicSlot({
                    defaultContents: "4.8",
                    value: args.slot20
                  })}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "_1200")
                  ? true
                  : hasVariant(globalVariants, "screen", "max")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"reviewBtn"}
                  data-plasmic-override={overrides.reviewBtn}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.reviewBtn)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Full Review",
                    value: args.slot21,
                    className: classNames(sty.slotTargetSlot21)
                  })}
                </p.Stack>
              ) : null}
            </p.Stack>

            {(hasVariant(globalVariants, "screen", "_768") ? true : true) ? (
              <div className={classNames(projectcss.all, sty.freeBox__fScF)}>
                <ProsCons
                  className={classNames("__wab_instance", sty.prosCons__nAaB1)}
                  info={p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dRlLa
                        )}
                      >
                        {"24/7 Online assistance"}
                      </div>
                    ),

                    value: args._247OnlineAssistance2,
                    className: classNames(sty.slotTarget247OnlineAssistance2)
                  })}
                  pros={true}
                />

                <ProsCons
                  className={classNames("__wab_instance", sty.prosCons__ikjyc)}
                  info={p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__glpAf
                        )}
                      >
                        {"Online assistance"}
                      </div>
                    ),

                    value: args._247OnlineAssistance4,
                    className: classNames(sty.slotTarget247OnlineAssistance4)
                  })}
                  pros={true}
                />

                <ProsCons
                  className={classNames("__wab_instance", sty.prosCons___8ZkqH)}
                  cons={true}
                  info={p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zqo4T
                        )}
                      >
                        {"Online assistance"}
                      </div>
                    ),

                    value: args._247OnlineAssistance6,
                    className: classNames(sty.slotTarget247OnlineAssistance6)
                  })}
                />
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "_1044")
            ? true
            : hasVariant(globalVariants, "screen", "max")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"depositOptions"}
            data-plasmic-override={overrides.depositOptions}
            hasGap={true}
            className={classNames(projectcss.all, sty.depositOptions)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Deposit Options",
              value: args.slot7,
              className: classNames(sty.slotTargetSlot7)
            })}

            <PaymentLogos
              data-plasmic-name={"paymentLogos"}
              data-plasmic-override={overrides.paymentLogos}
              className={classNames("__wab_instance", sty.paymentLogos)}
              slot8={p.renderPlasmicSlot({
                defaultContents: (
                  <p.Stack
                    as={p.PlasmicImg}
                    hasGap={true}
                    alt={""}
                    className={classNames(sty.img__mIWk)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"30.359px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_copy_of_cbn_components/images/frame1889.svg",
                      fullWidth: 30.359,
                      fullHeight: 9.844,
                      aspectRatio: 3.1
                    }}
                  />
                ),

                value: args.slot8
              })}
            />
          </p.Stack>
        ) : null}
        {(hasVariant(globalVariants, "screen", "_496") ? true : true) ? (
          <BonusCpa
            data-plasmic-name={"bonusCpa"}
            data-plasmic-override={overrides.bonusCpa}
            bonusName={p.renderPlasmicSlot({
              defaultContents: "no deposit BONUS",
              value: args.slot
            })}
            className={classNames("__wab_instance", sty.bonusCpa)}
            countryFlag={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nJkP8)}
                  displayHeight={"26px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"26px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_copy_of_cbn_components/images/flagHolder.svg",
                    fullWidth: 26,
                    fullHeight: 26,
                    aspectRatio: 1
                  }}
                />
              ),

              value: args.slot2
            })}
            cpaBtn={p.renderPlasmicSlot({
              defaultContents: "PLAY",
              value: args.children
            })}
            slot3={p.renderPlasmicSlot({
              defaultContents: "400% up to",
              value: args.slot3
            })}
            slot4={p.renderPlasmicSlot({
              defaultContents: "$4,000",
              value: args.slot4
            })}
            slot5={p.renderPlasmicSlot({
              defaultContents: "+ 100 Free Spins",
              value: args.slot5
            })}
            slot6={p.renderPlasmicSlot({
              defaultContents: "on Cleopatra’s Gold",
              value: args.slot6
            })}
            small={
              hasVariant(globalVariants, "screen", "_496") ? true : undefined
            }
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "_496") ? true : true) ? (
          <BonusProp
            data-plasmic-name={"bonusProp"}
            data-plasmic-override={overrides.bonusProp}
            className={classNames("__wab_instance", sty.bonusProp)}
            small={true}
          />
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "brandBox",
    "brandImg",
    "ratingProsCons",
    "userRating",
    "casinoBadge",
    "ratingBox",
    "reviewBtn",
    "depositOptions",
    "paymentLogos",
    "bonusCpa",
    "bonusProp"
  ],
  brandBox: ["brandBox", "brandImg"],
  brandImg: ["brandImg"],
  ratingProsCons: [
    "ratingProsCons",
    "userRating",
    "casinoBadge",
    "ratingBox",
    "reviewBtn"
  ],
  userRating: ["userRating", "casinoBadge", "ratingBox", "reviewBtn"],
  casinoBadge: ["casinoBadge"],
  ratingBox: ["ratingBox"],
  reviewBtn: ["reviewBtn"],
  depositOptions: ["depositOptions", "paymentLogos"],
  paymentLogos: ["paymentLogos"],
  bonusCpa: ["bonusCpa"],
  bonusProp: ["bonusProp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  brandBox: typeof BrandBox;
  brandImg: typeof p.PlasmicImg;
  ratingProsCons: "div";
  userRating: "div";
  casinoBadge: typeof CasinoBadge;
  ratingBox: typeof RatingBox;
  reviewBtn: "div";
  depositOptions: "div";
  paymentLogos: typeof PaymentLogos;
  bonusCpa: typeof BonusCpa;
  bonusProp: typeof BonusProp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCasinoStrip__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCasinoStrip__VariantsArgs;
    args?: PlasmicCasinoStrip__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCasinoStrip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCasinoStrip__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCasinoStrip__ArgProps,
      internalVariantPropNames: PlasmicCasinoStrip__VariantProps
    });

    return PlasmicCasinoStrip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCasinoStrip";
  } else {
    func.displayName = `PlasmicCasinoStrip.${nodeName}`;
  }
  return func;
}

export const PlasmicCasinoStrip = Object.assign(
  // Top-level PlasmicCasinoStrip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    brandBox: makeNodeComponent("brandBox"),
    brandImg: makeNodeComponent("brandImg"),
    ratingProsCons: makeNodeComponent("ratingProsCons"),
    userRating: makeNodeComponent("userRating"),
    casinoBadge: makeNodeComponent("casinoBadge"),
    ratingBox: makeNodeComponent("ratingBox"),
    reviewBtn: makeNodeComponent("reviewBtn"),
    depositOptions: makeNodeComponent("depositOptions"),
    paymentLogos: makeNodeComponent("paymentLogos"),
    bonusCpa: makeNodeComponent("bonusCpa"),
    bonusProp: makeNodeComponent("bonusProp"),

    // Metadata about props expected for PlasmicCasinoStrip
    internalVariantProps: PlasmicCasinoStrip__VariantProps,
    internalArgProps: PlasmicCasinoStrip__ArgProps
  }
);

export default PlasmicCasinoStrip;
/* prettier-ignore-end */
