// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: fiiNkbWJPqTRP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicStars.module.css"; // plasmic-import: fiiNkbWJPqTRP/css

export type PlasmicStars__VariantMembers = {
  small: "small";
};

export type PlasmicStars__VariantsArgs = {
  small?: SingleBooleanChoiceArg<"small">;
};

type VariantPropType = keyof PlasmicStars__VariantsArgs;
export const PlasmicStars__VariantProps = new Array<VariantPropType>("small");

export type PlasmicStars__ArgsType = {};
type ArgPropType = keyof PlasmicStars__ArgsType;
export const PlasmicStars__ArgProps = new Array<ArgPropType>();

export type PlasmicStars__OverridesType = {
  root?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultStarsProps {
  small?: SingleBooleanChoiceArg<"small">;
  className?: string;
}

function PlasmicStars__RenderFunc(props: {
  variants: PlasmicStars__VariantsArgs;
  args: PlasmicStars__ArgsType;
  overrides: PlasmicStars__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <p.PlasmicImg
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      alt={""}
      className={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.rootsmall]: hasVariant(variants, "small", "small") }
      )}
      displayHeight={
        hasVariant(variants, "small", "small")
          ? ("25px" as const)
          : ("30px" as const)
      }
      displayMaxHeight={"none" as const}
      displayMaxWidth={"100%" as const}
      displayMinHeight={"0" as const}
      displayMinWidth={"0" as const}
      displayWidth={
        hasVariant(variants, "small", "small")
          ? ("47px" as const)
          : ("58.125px" as const)
      }
      loading={"lazy" as const}
      src={{
        src: "/plasmic/copy_of_copy_of_cbn_components/images/group1629.svg",
        fullWidth: 58.125,
        fullHeight: 30,
        aspectRatio: 1.90625
      }}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStars__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStars__VariantsArgs;
    args?: PlasmicStars__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStars__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStars__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStars__ArgProps,
      internalVariantPropNames: PlasmicStars__VariantProps
    });

    return PlasmicStars__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStars";
  } else {
    func.displayName = `PlasmicStars.${nodeName}`;
  }
  return func;
}

export const PlasmicStars = Object.assign(
  // Top-level PlasmicStars renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStars
    internalVariantProps: PlasmicStars__VariantProps,
    internalArgProps: PlasmicStars__ArgProps
  }
);

export default PlasmicStars;
/* prettier-ignore-end */
