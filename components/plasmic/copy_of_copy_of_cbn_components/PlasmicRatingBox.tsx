// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8evnTWPVwZ7FqJMVwJ5kQX
// Component: Q-luTSlmtgyad-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Stars from "../../Stars"; // plasmic-import: fiiNkbWJPqTRP/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_cbn_components.module.css"; // plasmic-import: 8evnTWPVwZ7FqJMVwJ5kQX/projectcss
import sty from "./PlasmicRatingBox.module.css"; // plasmic-import: Q-luTSlmtgyad-/css

export type PlasmicRatingBox__VariantMembers = {
  horisonatal: "horisonatal";
};

export type PlasmicRatingBox__VariantsArgs = {
  horisonatal?: SingleBooleanChoiceArg<"horisonatal">;
};

type VariantPropType = keyof PlasmicRatingBox__VariantsArgs;
export const PlasmicRatingBox__VariantProps = new Array<VariantPropType>(
  "horisonatal"
);

export type PlasmicRatingBox__ArgsType = {
  slot20?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRatingBox__ArgsType;
export const PlasmicRatingBox__ArgProps = new Array<ArgPropType>("slot20");

export type PlasmicRatingBox__OverridesType = {
  root?: p.Flex<"div">;
  stars?: p.Flex<typeof Stars>;
  frame1845?: p.Flex<"div">;
  frame1915?: p.Flex<"div">;
};

export interface DefaultRatingBoxProps {
  slot20?: React.ReactNode;
  horisonatal?: SingleBooleanChoiceArg<"horisonatal">;
  className?: string;
}

function PlasmicRatingBox__RenderFunc(props: {
  variants: PlasmicRatingBox__VariantsArgs;
  args: PlasmicRatingBox__ArgsType;
  overrides: PlasmicRatingBox__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root,
          {
            [sty.roothorisonatal]: hasVariant(
              variants,
              "horisonatal",
              "horisonatal"
            )
          }
        )}
      >
        {true ? (
          <Stars
            data-plasmic-name={"stars"}
            data-plasmic-override={overrides.stars}
            className={classNames("__wab_instance", sty.stars, {
              [sty.starshorisonatal]: hasVariant(
                variants,
                "horisonatal",
                "horisonatal"
              )
            })}
            small={
              hasVariant(variants, "horisonatal", "horisonatal")
                ? true
                : undefined
            }
          />
        ) : null}
        {true ? (
          <div
            data-plasmic-name={"frame1845"}
            data-plasmic-override={overrides.frame1845}
            className={classNames(projectcss.all, sty.frame1845, {
              [sty.frame1845horisonatal]: hasVariant(
                variants,
                "horisonatal",
                "horisonatal"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1915"}
              data-plasmic-override={overrides.frame1915}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1915, {
                [sty.frame1915horisonatal]: hasVariant(
                  variants,
                  "horisonatal",
                  "horisonatal"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "4.8",
                value: args.slot20,
                className: classNames(sty.slotTargetSlot20, {
                  [sty.slotTargetSlot20horisonatal]: hasVariant(
                    variants,
                    "horisonatal",
                    "horisonatal"
                  )
                })
              })}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6EoJr,
                  {
                    [sty.texthorisonatal___6EoJr2PBXz]: hasVariant(
                      variants,
                      "horisonatal",
                      "horisonatal"
                    )
                  }
                )}
              >
                {"/5"}
              </div>
            </p.Stack>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___45DxK
              )}
            >
              {"User Rating"}
            </div>
          </div>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "stars", "frame1845", "frame1915"],
  stars: ["stars"],
  frame1845: ["frame1845", "frame1915"],
  frame1915: ["frame1915"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  stars: typeof Stars;
  frame1845: "div";
  frame1915: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRatingBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRatingBox__VariantsArgs;
    args?: PlasmicRatingBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRatingBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRatingBox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRatingBox__ArgProps,
      internalVariantPropNames: PlasmicRatingBox__VariantProps
    });

    return PlasmicRatingBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatingBox";
  } else {
    func.displayName = `PlasmicRatingBox.${nodeName}`;
  }
  return func;
}

export const PlasmicRatingBox = Object.assign(
  // Top-level PlasmicRatingBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    stars: makeNodeComponent("stars"),
    frame1845: makeNodeComponent("frame1845"),
    frame1915: makeNodeComponent("frame1915"),

    // Metadata about props expected for PlasmicRatingBox
    internalVariantProps: PlasmicRatingBox__VariantProps,
    internalArgProps: PlasmicRatingBox__ArgProps
  }
);

export default PlasmicRatingBox;
/* prettier-ignore-end */
